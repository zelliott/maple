
We propose an algorithmic strategy for improving the efficiency of Monte Carlo searches for the low-energy states of proteins. Our strategy is motivated by a model of how proteins alter their shapes. In our model, when proteins fold under physiological conditions, their backbone dihedral angles change synchronously in groups of four or more to avoid steric clashes and respect the kinematic conservation laws. They wriggle; they do not thrash. We describe a simple algorithm that can be used to incorporate wriggling in Monte Carlo simulations of protein folding. We have tested this wriggling algorithm against a code in which the dihedral angles are varied independently (thrashing). Our standard of success is the average root-mean-square distance (rmsd) between the alpha-carbons of the folding protein and those of its native structure. After 100,000 Monte Carlo sweeps, the relative decrease in the mean rmsd, as one switches from thrashing to wriggling, rises from 11% for the protein 3LZM with 164 amino acids (aa) to 40% for the protein 1A1S with 313 aa and 47% for the protein 16PK with 415 aa. These results suggest that wriggling is useful and that its utility increases with the size of the protein. One may implement wriggling on a parallel computer or a computer farm.

